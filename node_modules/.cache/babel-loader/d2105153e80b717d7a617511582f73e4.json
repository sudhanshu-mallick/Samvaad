{"ast":null,"code":"var _jsxFileName = \"/Users/sshekharmal/Desktop/Samvaad/src/Components/LearnNew/Learn.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Learn() {\n  _s();\n\n  const [divText, setDivText] = useState();\n  const [buttonIcon, setButtonIcon] = useState(\"fas fa-microphone-alt fa-3x\");\n  var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  var recognition = new SpeechRecognition();\n\n  function showUserMessage(userMessage) {\n    const output = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatarea-inner user\",\n      children: userMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 20\n    }, this);\n\n    setDivText(prev => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [prev, output]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this));\n  }\n\n  function showBotMessage(botMessage) {\n    const output = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatarea-inner chatbot\",\n      children: botMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 20\n    }, this);\n\n    setDivText(prev => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [prev, output]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this));\n  }\n\n  function chatBotVoice(message) {\n    const speech = new SpeechSynthesisUtterance();\n    speech.text = \"This is test message.\";\n\n    if (message.includes(\"who are you\")) {\n      let finalResult = intro[Math.floor(Math.random() * intro.length)];\n      speech.text = finalResult;\n    }\n\n    if (message.includes(\"fine\")) {\n      let finalresult = help[Math.floor(Math.random() * help.length)];\n      speech.text = finalresult;\n    }\n\n    if (message.includes(\"how are you\" || \"how are you doing today\")) {\n      let finalresult = greetings[Math.floor(Math.random() * greetings.length)];\n      speech.text = finalresult;\n    }\n\n    if (message.includes(\"tell me something about you\" || \"tell me something about your hobbies\")) {\n      let finalresult = hobbies[Math.floor(Math.random() * hobbies.length)];\n      speech.text = finalresult;\n    }\n\n    if (message.includes(\"pizza\")) {\n      let finalresult = pizzas[Math.floor(Math.random() * pizzas.length)];\n      speech.text = finalresult;\n    }\n\n    if (message.includes(\"thank you\" || \"thank you so much\")) {\n      let finalresult = thank[Math.floor(Math.random() * thank.length)];\n      speech.text = finalresult;\n    }\n\n    if (message.includes(\"talk to you\" || \"talk\")) {\n      let finalresult = closing[Math.floor(Math.random() * closing.length)];\n      speech.text = finalresult;\n    }\n\n    window.speechSynthesis.speak(speech);\n    showBotMessage(speech.text);\n  }\n\n  recognition.onresult = function (e) {\n    let resultIndex = e.resultIndex;\n    let transcript = e.results[resultIndex][0].transcript;\n    showUserMessage(transcript);\n    chatBotVoice(transcript);\n    console.log(transcript);\n  };\n\n  recognition.onend = function () {\n    setButtonIcon(\"fas fa-microphone-alt fa-3x\");\n  };\n\n  function clickIt() {\n    setButtonIcon(\"fas fa-volume-up fa-3x\");\n    recognition.start();\n    console.log(\"Activated\");\n  }\n\n  const [meaning, setMeaning] = useState(\"Meaning appears here ...\");\n  const [word, setWord] = useState(\"\");\n\n  function getJoke() {\n    let url = \"https://api.dictionaryapi.dev/api/v2/entries/en_US/\" + word;\n    axios.get(url).then(res => {\n      // response = res.data[0].id;\n      console.log(\"Here : \" + res.data[0].meanings[0].definitions[0].definition);\n      setMeaning(res.data[0].meanings[0].definitions[0].definition);\n    });\n  }\n\n  function clear() {\n    setWord(\"\");\n    setMeaning(\"Meaning appears here ...\");\n  }\n\n  const [textBot, setTextBot] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://use.fontawesome.com/releases/v5.12.1/css/all.css\",\n      crossorigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading\",\n      children: \"WANT TO LEARN SOMETHING ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meaning-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"name formEntry\",\n        placeholder: \"Word\",\n        value: word,\n        onChange: e => setWord(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        id: \"submit\",\n        onClick: getJoke,\n        children: \"Get Meaning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"black\",\n        id: \"submit-clear\",\n        onClick: clear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"secondaryTitle title\",\n          children: meaning\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Learn, \"ALKpJxBdB8eTX8vg+ygirQWYgqk=\");\n\n_c = Learn;\n\nvar _c;\n\n$RefreshReg$(_c, \"Learn\");","map":{"version":3,"sources":["/Users/sshekharmal/Desktop/Samvaad/src/Components/LearnNew/Learn.jsx"],"names":["React","useState","axios","Button","Learn","divText","setDivText","buttonIcon","setButtonIcon","SpeechRecognition","window","webkitSpeechRecognition","recognition","showUserMessage","userMessage","output","prev","showBotMessage","botMessage","chatBotVoice","message","speech","SpeechSynthesisUtterance","text","includes","finalResult","intro","Math","floor","random","length","finalresult","help","greetings","hobbies","pizzas","thank","closing","speechSynthesis","speak","onresult","e","resultIndex","transcript","results","console","log","onend","clickIt","start","meaning","setMeaning","word","setWord","getJoke","url","get","then","res","data","meanings","definitions","definition","clear","textBot","setTextBot","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./styles.css\";\n\nexport default function Learn() {\n  const [divText, setDivText] = useState();\n  const [buttonIcon, setButtonIcon] = useState(\"fas fa-microphone-alt fa-3x\");\n\n  var SpeechRecognition =\n    window.SpeechRecognition || window.webkitSpeechRecognition;\n  var recognition = new SpeechRecognition();\n\n  function showUserMessage(userMessage) {\n    const output = <div className=\"chatarea-inner user\">{userMessage}</div>;\n    setDivText((prev) => (\n      <div>\n        {prev}\n        {output}\n      </div>\n    ));\n  }\n\n  function showBotMessage(botMessage) {\n    const output = <div className=\"chatarea-inner chatbot\">{botMessage}</div>;\n    setDivText((prev) => (\n      <div>\n        {prev}\n        {output}\n      </div>\n    ));\n  }\n\n  function chatBotVoice(message) {\n    const speech = new SpeechSynthesisUtterance();\n    speech.text = \"This is test message.\";\n\n    if (message.includes(\"who are you\")) {\n      let finalResult = intro[Math.floor(Math.random() * intro.length)];\n      speech.text = finalResult;\n    }\n\n    if (message.includes(\"fine\")) {\n      let finalresult = help[Math.floor(Math.random() * help.length)];\n      speech.text = finalresult;\n    }\n    if (message.includes(\"how are you\" || \"how are you doing today\")) {\n      let finalresult = greetings[Math.floor(Math.random() * greetings.length)];\n      speech.text = finalresult;\n    }\n    if (\n      message.includes(\n        \"tell me something about you\" || \"tell me something about your hobbies\"\n      )\n    ) {\n      let finalresult = hobbies[Math.floor(Math.random() * hobbies.length)];\n      speech.text = finalresult;\n    }\n    if (message.includes(\"pizza\")) {\n      let finalresult = pizzas[Math.floor(Math.random() * pizzas.length)];\n      speech.text = finalresult;\n    }\n    if (message.includes(\"thank you\" || \"thank you so much\")) {\n      let finalresult = thank[Math.floor(Math.random() * thank.length)];\n      speech.text = finalresult;\n    }\n    if (message.includes(\"talk to you\" || \"talk\")) {\n      let finalresult = closing[Math.floor(Math.random() * closing.length)];\n      speech.text = finalresult;\n    }\n\n    window.speechSynthesis.speak(speech);\n    showBotMessage(speech.text);\n  }\n\n  recognition.onresult = function (e) {\n    let resultIndex = e.resultIndex;\n    let transcript = e.results[resultIndex][0].transcript;\n    showUserMessage(transcript);\n    chatBotVoice(transcript);\n    console.log(transcript);\n  };\n\n  recognition.onend = function () {\n    setButtonIcon(\"fas fa-microphone-alt fa-3x\");\n  };\n\n  function clickIt() {\n    setButtonIcon(\"fas fa-volume-up fa-3x\");\n    recognition.start();\n    console.log(\"Activated\");\n  }\n\n  const [meaning, setMeaning] = useState(\"Meaning appears here ...\");\n  const [word, setWord] = useState(\"\");\n\n  function getJoke() {\n    let url = \"https://api.dictionaryapi.dev/api/v2/entries/en_US/\" + word;\n    axios.get(url).then((res) => {\n      // response = res.data[0].id;\n\n      console.log(\n        \"Here : \" + res.data[0].meanings[0].definitions[0].definition\n      );\n\n      setMeaning(res.data[0].meanings[0].definitions[0].definition);\n    });\n  }\n\n  function clear() {\n    setWord(\"\");\n    setMeaning(\"Meaning appears here ...\");\n  }\n\n  const [textBot, setTextBot] = useState(\"\");\n\n  return (\n    <div>\n      {\" \"}\n      <link\n        rel=\"stylesheet\"\n        href=\"https://use.fontawesome.com/releases/v5.12.1/css/all.css\"\n        crossorigin=\"anonymous\"\n      ></link>\n      <h1 className=\"heading\">WANT TO LEARN SOMETHING ?</h1>\n      <div className=\"meaning-div\">\n        <input\n          type=\"text\"\n          className=\"name formEntry\"\n          placeholder=\"Word\"\n          value={word}\n          onChange={(e) => setWord(e.target.value)}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          id=\"submit\"\n          onClick={getJoke}\n        >\n          Get Meaning\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"black\"\n          id=\"submit-clear\"\n          onClick={clear}\n        >\n          Clear\n        </Button>\n        <div>\n          <div className=\"secondaryTitle title\">{meaning}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}